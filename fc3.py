# -*- coding: utf-8 -*-
"""FC3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10uX0OK90WZ_crKBm9ab6HZ1bVjioIk1R
"""

import random

graph = {
    'EL ROSARIO': {'INSTITUTO DEL PETROLEO': 6, 'TACUBA': 4},
    'INSTITUTO DEL PETROLEO': {'EL ROSARIO': 6, 'DEPORTIVO 18 DE MARZO': 2, 'LA RAZA': 2},
    'DEPORTIVO 18 DE MARZO': {'INSTITUTO DEL PETROLEO': 2,'LA RAZA': 2, 'MARTIN CARRERA': 2},
    'MARTIN CARRERA': {'DEPORTIVO 18 DE MARZO': 2, 'CONSULADO': 2},
    'LA RAZA': {'DEPORTIVO 18 DE MARZO': 2, 'INSTITUTO DEL PETROLEO': 2, 'GUERRERO': 2, 'CONSULADO': 3},
    'CONSULADO': {'LA RAZA': 2, 'MARTIN CARRERA': 2, 'OCEANIA': 3},
    'TACUBA': {'EL ROSARIO': 4, 'HIDALGO': 7, 'TACUBAYA': 5},
    'GUERRERO': {'LA RAZA': 2, 'HIDALGO': 1, 'GARIBALDI': 1},
    'GARIBALDI': {'MORELOS': 3, 'BELLAS ARTES': 1, 'GUERRERO': 1},
    'OCEANIA': {'CONSULADO': 3, 'SAN LAZARO': 3, 'PANTITLAN': 3},
    'MORELOS': {'GARIBALDI': 3, 'CONSULADO': 2, 'SAN LAZARO': 1, 'CANDELARIA': 1},
    'HIDALGO': {'TACUBA': 7, 'GUERRERO': 1, 'BELLAS ARTES': 1, 'BALDERAS': 2},
    'BELLAS ARTES': {'HIDALGO': 1, 'SALTO DEL AGUA': 2, 'GARIBALDI': 1, 'PINO SUAREZ': 3},
    'SAN LAZARO': {'MORELOS': 1, 'CANDELARIA': 1, 'PANTITLAN': 6, 'OCEANIA': 3},
    'BALDERAS': {'TACUBAYA': 6, 'HIDALGO': 2, 'SALTO DEL AGUA': 1, 'CENTRO MEDICO': 3},
    'SALTO DEL AGUA': {'BELLAS ARTES': 2, 'BALDERAS': 1, 'PINO SUAREZ': 2, 'CHABACANO': 3},
    'PINO SUAREZ': {'BELLAS ARTES': 3, 'SALTO DEL AGUA': 2, 'CANDELARIA': 2, 'CHABACANO': 1},
    'CANDELARIA': {'SAN LAZARO': 1, 'PINO SUAREZ': 2, 'MORELOS': 1, 'JAMAICA': 2},
    'JAMAICA': {'CANDELARIA': 2, 'CHABACANO': 1, 'PANTITLAN': 5, 'SANTA ANITA': 1},
    'CHABACANO': {'JAMAICA': 1, 'PINO SUAREZ': 1, 'SALTO DEL AGUA': 3, 'CENTRO MEDICO': 2, 'SANTA ANITA': 2, 'ERMITA': 6},
    'CENTRO MEDICO': {'CHABACANO': 2, 'BALDERAS': 3, 'TACUBAYA': 3, 'ZAPATA': 4},
    'TACUBAYA': {'CENTRO MEDICO': 3, 'BALDERAS': 6, 'TACUBA': 5, 'MIXCOAC': 3},
    'SANTA ANITA': {'CHABACANO': 2, 'JAMAICA': 1, 'ATLALILCO': 6},
    'MIXCOAC': {'TACUBAYA': 3, 'ZAPATA': 3},
    'ZAPATA': {'MIXCOAC': 3, 'CENTRO MEDICO': 4, 'ERMITA': 3},
    'ERMITA': {'ZAPATA': 3, 'CHABACANO': 6, 'ATLALILCO': 2},
    'ATLALILCO': {'ERMITA': 2, 'SANTA ANITA': 6},
    'PANTITLAN': {'JAMAICA': 5, 'SAN LAZARO': 6, 'OCEANIA': 3}

}

start_station = 'EL ROSARIO'
destination_station = 'SAN LAZARO'


population_size = 10
max_generations = 100
mutation_rate = 0.1
elitism_size = 2

def generate_initial_population(population_size):
    population = []
    for _ in range(population_size):
        route = [start_station]
        while route[-1] != destination_station:
            current_station = route[-1]
            next_station = random.choice(list(graph[current_station].keys()))
            route.append(next_station)
            if next_station == destination_station:
                break
        population.append(route)
    return population

def fitness(route):
    total_cost = 0
    for i in range(len(route) - 1):
        if route[i+1] in graph[route[i]]:
            total_cost += graph[route[i]][route[i+1]]
        else:
            return float('inf')  # Penaliza rutas inv√°lidas
    return total_cost

def selection(population):
    sorted_population = sorted(population, key=fitness)
    return sorted_population[:elitism_size] + sorted_population[elitism_size:]

def crossover(parent1, parent2):
    crossover_point = random.randint(1, min(len(parent1), len(parent2)) - 1)
    child = parent1[:crossover_point]
    child += [x for x in parent2[crossover_point:] if x not in child]
    return child

def mutate(route, mutation_rate):
    for i in range(1, len(route) - 1):
        if random.random() < mutation_rate:
            possible_stations = list(graph[route[i-1]].keys())
            new_station = random.choice(possible_stations)
            route[i] = new_station
    return route

def genetic_algorithm():
    population = generate_initial_population(population_size)
    for generation in range(max_generations):
        population = selection(population)
        new_population = population[:elitism_size]  # Lleva adelante los mejores
        while len(new_population) < population_size:
            parent1, parent2 = random.sample(population, 2)
            child = crossover(parent1, parent2)
            child = mutate(child, mutation_rate)
            new_population.append(child)
        population = new_population
        best_route = min(population, key=fitness)
        print(f"Generation {generation}: Best Route - {best_route}, Total Cost - {fitness(best_route)}")
        if fitness(best_route) == 0:
            break  # Si encuentra la ruta perfecta


genetic_algorithm()